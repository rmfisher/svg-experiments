{"version":3,"sources":["circuit/circuitUtils.js","circuit/Circuit.js","foreground/Foreground.js","App.js","index.js"],"names":["isMobile","window","innerWidth","dotSpacing","dotOffset","dotRadius","minPoints","maxPoints","minSegmentLength","maxSegmentLength","wormSpeed","wormLength","wormInterval","wormStartDelay","startPoints","drawCircuit","svgElement","width","clientWidth","parentNode","height","clientHeight","svg","select","dotCountX","Math","floor","dotCountY","timeouts","g","append","attr","i","j","drawBackground","drawWorm","wormGroup","points","start","length","sectionWidth","sectionHeight","minX","minY","maxX","maxY","push","randomInt","addStartPoints","splice","getStart","pointCount","h0","random","s0","getSignFromBounds","h","s","x","y","clamp","generatePoints","dx","dy","abs","getLength","duration","clampedWormLength","min","dasharray","path","startX","startY","concat","getPath","getStyle","setTimeoutAndTrack","remove","selectAll","forEach","t","clearTimeout","cleanUp","dashoffset","max","value","f","id","setTimeout","index","indexOf","removeTimeout","Circuit","initialize","_this","cleanUpRunningCircuit","this","_this2","react_default","a","createElement","lib_default","handleWidth","handleHeight","onResize","className","ref","e","Component","Foreground","viewBox","preserveAspectRatio","d","App","react","src_circuit_Circuit","src_foreground_Foreground","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.f84c320b.chunk.js","sourcesContent":["import { select } from 'd3-selection'\n\nconst isMobile = window.innerWidth <= 768\nconst dotSpacing = 44\nconst dotOffset = 22\nconst dotRadius = 3\nconst minPoints = 3\nconst maxPoints = 5\nconst minSegmentLength = 4\nconst maxSegmentLength = isMobile ? 8 : 10\nconst wormSpeed = isMobile ? 10 : 20 // Dots covered per second.\nconst wormLength = isMobile ? 12 : 15\nconst wormInterval = isMobile ? 200 : 100 // In ms.\nconst wormStartDelay = 50 // In ms.\nconst startPoints = []\n\nexport const drawCircuit = svgElement => {\n  const width = svgElement.clientWidth || svgElement.parentNode.clientWidth\n  const height = svgElement.clientHeight || svgElement.parentNode.clientHeight\n  const svg = select(svgElement)\n\n  const dotCountX = Math.floor((width - dotOffset) / dotSpacing) + 1\n  const dotCountY = Math.floor((height - dotOffset) / dotSpacing) + 1\n  const timeouts = []\n\n  drawBackground(svg, dotCountX, dotCountY)\n\n  const wormGroup = svg.append('g').attr('class', 'worm-group')\n  drawWorm(wormGroup, dotCountX, dotCountY, timeouts)\n\n  return () => cleanUp(svg, timeouts)\n}\n\nfunction drawBackground(svg, dotCountX, dotCountY) {\n  const g = svg.append('g').attr('class', 'circuit-background')\n  for (let i = 0; i < dotCountX; i++) {\n    for (let j = 0; j < dotCountY; j++) {\n      g.append('circle')\n        .attr('cx', dotOffset + dotSpacing * i)\n        .attr('cy', dotOffset + dotSpacing * j)\n        .attr('r', dotRadius)\n        .attr('class', 'circuit-dot')\n    }\n  }\n}\n\nfunction drawWorm(wormGroup, dotCountX, dotCountY, timeouts) {\n  const points = generatePoints(dotCountX, dotCountY)\n  const length = getLength(points)\n  const duration = (2 * length) / dotSpacing / wormSpeed\n  const clampedWormLength = Math.min(length, wormLength * dotSpacing)\n  const dasharray = clampedWormLength + ' ' + 2 * length\n  const path = wormGroup.append('path')\n\n  path\n    .attr('d', getPath(points))\n    .attr('class', 'circuit-worm')\n    .attr('style', getStyle(dasharray, length, duration))\n\n  setTimeoutAndTrack(() => path.attr('style', getStyle(dasharray, -length, duration)), wormStartDelay, timeouts)\n  setTimeoutAndTrack(() => path.remove(), duration * 1000 + wormStartDelay, timeouts)\n  setTimeoutAndTrack(() => drawWorm(wormGroup, dotCountX, dotCountY, timeouts), wormInterval, timeouts)\n}\n\nfunction generatePoints(dotCountX, dotCountY) {\n  const start = getStart(dotCountX, dotCountY)\n  const pointCount = randomInt(minPoints, maxPoints)\n  const h0 = Math.random() > 0.5\n  const s0 = getSignFromBounds(start[0], start[1], h0, dotCountX, dotCountY)\n\n  let h = h0\n  let s = s0\n  let x = start[0]\n  let y = start[1]\n\n  const points = [[x, y]]\n  for (let i = 0; i < pointCount; i++) {\n    if (h) {\n      x = clamp(x + s * randomInt(minSegmentLength, maxSegmentLength), 0, dotCountX - 1)\n    } else {\n      y = clamp(y + s * randomInt(minSegmentLength, maxSegmentLength), 0, dotCountY - 1)\n    }\n    points[i + 1] = [x, y]\n\n    h = !h\n    s = getSignFromBounds(x, y, h, dotCountX, dotCountY)\n  }\n  return points\n}\n\nfunction getStart(dotCountX, dotCountY) {\n  if (startPoints.length === 0) {\n    addStartPoints(dotCountX, dotCountY)\n  }\n  return startPoints.splice(startPoints.length - 1, 1)[0]\n}\n\nfunction addStartPoints(dotCountX, dotCountY) {\n  const sectionWidth = dotCountX / 3\n  const sectionHeight = dotCountY / 2\n\n  for (let i = 2; i >= 0; i--) {\n    for (let j = 1; j >= 0; j--) {\n      const minX = Math.floor(i * sectionWidth)\n      const minY = Math.floor(j * sectionHeight)\n      const maxX = Math.floor((i + 1) * sectionWidth)\n      const maxY = Math.floor((j + 1) * sectionHeight)\n      startPoints.push([randomInt(minX, maxX), randomInt(minY, maxY)])\n    }\n  }\n}\n\nfunction getSignFromBounds(x, y, h, dotCountX, dotCountY) {\n  if ((h && x - minSegmentLength < 0) || (!h && y - minSegmentLength < 0)) {\n    return 1\n  } else if ((h && x + minSegmentLength > dotCountX - 1) || (!h && y + minSegmentLength > dotCountY - 1)) {\n    return -1\n  } else {\n    return Math.random() > 0.5 ? 1 : -1\n  }\n}\n\nfunction getLength(points) {\n  let length = 0\n  for (let i = 0; i < points.length - 1; i++) {\n    const dx = points[i + 1][0] - points[i][0]\n    const dy = points[i + 1][1] - points[i][1]\n    length += Math.abs(dx + dy)\n  }\n  return length * dotSpacing\n}\n\nfunction getPath(points) {\n  const startX = dotOffset + dotSpacing * points[0][0]\n  const startY = dotOffset + dotSpacing * points[0][1]\n  let path = `M${startX},${startY}`\n  for (let i = 1; i < points.length; i++) {\n    const x = dotOffset + dotSpacing * points[i][0]\n    const y = dotOffset + dotSpacing * points[i][1]\n    path += ` L${x},${y}`\n  }\n  return path\n}\n\nfunction getStyle(dasharray, dashoffset, duration) {\n  return `stroke-dasharray: ${dasharray}; stroke-dashoffset: ${dashoffset}; transition: stroke-dashoffset ${duration}s linear;`\n}\n\nfunction randomInt(min, max) {\n  return min + Math.floor(Math.random() * (max - min + 1))\n}\n\nfunction clamp(value, min, max) {\n  return Math.min(max, Math.max(min, value))\n}\n\nfunction setTimeoutAndTrack(f, duration, timeouts) {\n  const id = setTimeout(() => {\n    f()\n    removeTimeout(timeouts, id)\n  }, duration)\n\n  timeouts.push(id)\n}\n\nfunction removeTimeout(timeouts, id) {\n  const index = timeouts.indexOf(id)\n  if (index > -1) {\n    timeouts.splice(index, 1)\n  }\n}\n\nfunction cleanUp(svg, timeouts) {\n  svg.selectAll('*').remove()\n  timeouts.forEach(t => clearTimeout(t))\n}\n","import React, { Component } from 'react'\nimport ReactResizeDetector from 'react-resize-detector'\nimport { drawCircuit } from './circuitUtils'\nimport './Circuit.scss'\n\nclass Circuit extends Component {\n  componentDidMount() {\n    this.initialize()\n  }\n\n  componentWillUnmount() {\n    if (this.cleanUpRunningCircuit) {\n      this.cleanUpRunningCircuit()\n    }\n  }\n\n  initialize = () => {\n    if (this.cleanUpRunningCircuit) {\n      this.cleanUpRunningCircuit()\n    }\n    this.cleanUpRunningCircuit = drawCircuit(this.svg)\n  }\n\n  render() {\n    return (\n      <ReactResizeDetector handleWidth handleHeight onResize={this.initialize}>\n        <div className=\"circuit\">\n          <svg className=\"circuit-svg\" ref={e => (this.svg = e)} />\n        </div>\n      </ReactResizeDetector>\n    )\n  }\n}\n\nexport default Circuit\n","import React from 'react'\nimport './Foreground.scss'\n\nconst Foreground = () => (\n  <div className=\"foreground-container\">\n    <svg className=\"foreground-svg\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n      <path className=\"lower-path\" d=\"M 50 0 L 100 0 L 100 200 Z\" />\n      <path className=\"upper-path\" d=\"M 90 0 L 100 0 L 100 35 Z\" />\n    </svg>\n    <div className=\"foreground-text\">\n      <div className=\"title\">The sky above the port</div>\n      <div className=\"subtitle\">was the color of television, tuned to a dead channel.</div>\n    </div>\n  </div>\n)\n\nexport default Foreground\n","import React, { Fragment } from 'react'\nimport Circuit from './circuit/Circuit'\nimport Foreground from './foreground/Foreground'\nimport './App.scss'\n\nconst App = () => (\n  <Fragment>\n    <Circuit />\n    <Foreground />\n  </Fragment>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}